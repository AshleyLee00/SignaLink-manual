import{_ as a,a as n}from"./chunks/v4_displays_commands_add_command.CEi9y4Vh.js";import{_ as s,c as t,o,ae as i}from"./chunks/framework.CYV0OCM_.js";const f=JSON.parse('{"title":"Command Functionality","description":"Configure Commands to execute via XMR, in a schedule or Layout","frontmatter":{"title":"Command Functionality","description":"Configure Commands to execute via XMR, in a schedule or Layout"},"headers":[],"relativePath":"en/displays/commands.md","filePath":"en/displays/commands.md"}'),l={name:"en/displays/commands.md"};function d(p,e,r,c,h,m){return o(),t("div",null,e[0]||(e[0]=[i('<h1 id="command-functionality" tabindex="-1">Command Functionality <a class="header-anchor" href="#command-functionality" aria-label="Permalink to &quot;Command Functionality&quot;">​</a></h1><p>The Command Functionality in SignaLink is used to configure a set of Commands for a User to select to execute via <strong>XMR</strong>, in a <strong>Schedule</strong> or include in a <strong>Layout</strong>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Commands can have Command Strings to apply to all Players or have a different Command String per Player which is particularly useful if your network is mixed / connected to different Displays or have slightly different Player hardware.</p></div><p>A <strong>Command record</strong> is created which allows for a &quot;generic command&quot; to be created which can be used across <strong>Display Profiles</strong>, <strong>Scheduled Events</strong> and the <strong>Shell Command Widget</strong>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Commands provide easy access to functionality for RS232, Android Intents and Philips SoC (system on chip)!</p></div><h2 id="command-management" tabindex="-1">Command Management <a class="header-anchor" href="#command-management" aria-label="Permalink to &quot;Command Management&quot;">​</a></h2><p>Commands are created and managed from <strong>Commands</strong> under the <strong>Displays</strong> section of the main CMS menu:</p><p><img src="'+a+'" alt="Display Commands"></p><p>Use the row menu for a Command to Edit, Delete and set <a href="/SignaLink-manual/users/features-and-sharing.html#content-share">Share</a> options.</p><h3 id="add-command" tabindex="-1">Add Command <a class="header-anchor" href="#add-command" aria-label="Permalink to &quot;Add Command&quot;">​</a></h3><p>Click on the <strong>Add Command</strong> button and complete the relevant form fields:</p><p><img src="'+n+`" alt="add_command"></p><p>Use the <strong>Command</strong> drop down menu to select from one of the following options to configure:</p><h4 id="free-text" tabindex="-1">Free Text <a class="header-anchor" href="#free-text" aria-label="Permalink to &quot;Free Text&quot;">​</a></h4><p>Type in a Command String</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The Command String represents the final executed Command and can be a direct call to the shell or can have a <strong>helper</strong> specified, see &quot;Helpers&quot; section below.</p></div><h4 id="philips-android" tabindex="-1">Philips Android <a class="header-anchor" href="#philips-android" aria-label="Permalink to &quot;Philips Android&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Phillips Commercial Display integration is available from Android v2 R200.</p></div><p>The following commands can be used to control LED&#39;s located on the sides of some commercial Phillips Displays:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tpv_led|off</span></span>
<span class="line"><span>tpv_led|red</span></span>
<span class="line"><span>tpv_led|green</span></span>
<span class="line"><span>tpv_led|blue</span></span>
<span class="line"><span>tpv_led|white</span></span></code></pre></div><p>From Android v2 R215, integration has been added to power on/off the screen backlight by using the following commands:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tpv|backlighton</span></span>
<span class="line"><span>tpv|backlightoff</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The below commands can be used for one specific Android 4 model only; 2016 model <a href="https://www.philips.co.uk/p-p/10BDL3051T_00/signage-solutions-multi-touch-display" target="_blank" rel="noreferrer">10BDL3051T</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tpv|screenoff</span></span>
<span class="line"><span>tpv|screenon</span></span></code></pre></div><p><code>screenoff</code> will turn the screen off and put in a lower power state which can then be turned back on with <code>screenon</code>.</p><p>For all other models, please use <code>backlighton/off</code> as <code>screenoff</code> will power completely off resulting in the need for an on site restart!</p></div><p>Mute/unmute commands have also been added from v2 R215:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tpv|mute</span></span>
<span class="line"><span>tpv|unmute</span></span></code></pre></div><p><strong>Please note:</strong> <code>backlighton/off</code> doesn&#39;t mute audio, so if you have audio playing you will will also want to schedule the above <code>mute/unmute</code> commands at the same time.</p><h4 id="rs232" tabindex="-1">RS232 <a class="header-anchor" href="#rs232" aria-label="Permalink to &quot;RS232&quot;">​</a></h4><p>RS232 commands can be executed on Players by using the <code>rs232</code> prefix in the Command String. The format of the command is <code>rs232|&lt;connection string&gt;|&lt;command&gt;</code>.</p><p>The connection string should be provided in the following format on Windows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;COM#&gt;,&lt;Baud Rate&gt;,&lt;Data Bits&gt;,&lt;Parity|None,Odd,Even,Mark,Space&gt;,&lt;StopBits|None,One,Two,OnePointFive&gt;,&lt;Handshake|None,XOnXOff,RequestToSend,RequestToSendXOnXOff&gt;,&lt;HexSupport|0,1,default 0&gt;</span></span></code></pre></div><p><strong>Please note:</strong> If you need to send your Command in HEX format, you should specify the byte string in the Command String, for example: <code>7E 00 00 FF 00 00 00 00 00 00 00 00 00 00 00 00 00 FF</code> , this will be converted to a byte stream by the player. You will need to set the <code>HexSupport</code> element of the connection string to <code>1</code>.</p><p>The connection string should be provided in the following format on Android:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;DeviceName&gt;,&lt;Baud Rate&gt;,&lt;Data Bits&gt;,&lt;Parity&gt;,&lt;StopBits&gt;,&lt;FlowControl&gt;</span></span></code></pre></div><p>Each setting is represented by a corresponding number:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATA_BITS_5 = 5;</span></span>
<span class="line"><span>DATA_BITS_6 = 6;</span></span>
<span class="line"><span>DATA_BITS_7 = 7;</span></span>
<span class="line"><span>DATA_BITS_8 = 8;</span></span>
<span class="line"><span>PARITY_NONE = 0;</span></span>
<span class="line"><span>PARITY_ODD = 1;</span></span>
<span class="line"><span>PARITY_EVEN = 2;</span></span>
<span class="line"><span>PARITY_MARK = 3;</span></span>
<span class="line"><span>PARITY_SPACE = 4;</span></span>
<span class="line"><span>STOP_BITS_1 = 1;</span></span>
<span class="line"><span>STOP_BITS_15 = 3;</span></span>
<span class="line"><span>STOP_BITS_2 = 2;</span></span>
<span class="line"><span>FLOW_CONTROL_OFF = 0;</span></span>
<span class="line"><span>FLOW_CONTROL_RTS_CTS = 1;</span></span>
<span class="line"><span>FLOW_CONTROL_DSR_DTR = 2;</span></span>
<span class="line"><span>FLOW_CONTROL_XON_XOFF = 3;</span></span></code></pre></div><p>The Command itself is a string which gets sent over RS232 using the connection details.</p><h4 id="android-intent" tabindex="-1">Android Intent <a class="header-anchor" href="#android-intent" aria-label="Permalink to &quot;Android Intent&quot;">​</a></h4><p>Android Display Profiles can use the <code>intent</code> helper to specify an intent that should be called when the Command executes. The format of the Command is <code>intent|&lt;type|activity,service,broadcast&gt;|&lt;activity&gt;|[&lt;extras&gt;]</code> .</p><p><code>[&lt;extras&gt;]</code> is an optional parameter available from <strong>Android v2 R206</strong> used to provide additional data to the Intent. This must be a JSON formatted string containing an array with at least one object. The object format is below and must be on one line.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;extra name&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;type|string,int,bool,intArray&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;the</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> of</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> the</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> above</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> type&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>For example, on some devices you can program the firmware to set on/off times.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;timeon&quot;,</span></span>
<span class="line"><span>  &quot;type&quot;: &quot;intArray&quot;,</span></span>
<span class="line"><span>  &quot;value&quot;: [2018, 7, 28, 8, 40]</span></span>
<span class="line"><span>}, {</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;timeoff&quot;,</span></span>
<span class="line"><span>  &quot;type&quot;: &quot;intArray&quot;,</span></span>
<span class="line"><span>  &quot;value&quot;: [2018, 7, 28, 21, 40]</span></span>
<span class="line"><span>}]</span></span></code></pre></div><p>This would be set on the command as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>intent|broadcast|activity|[{ &quot;name&quot;: &quot;timeon&quot;, &quot;type&quot;: &quot;intArray&quot;, &quot;value&quot;: [2018, 7, 28, 8, 40] }, { &quot;name&quot;: &quot;timeoff&quot;, &quot;type&quot;: &quot;intArray&quot;, &quot;value&quot;: [2018, 7, 28, 21, 40] }]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Commands containing an intent helper are ignored in the Windows Player!</p></div><h3 id="helpers" tabindex="-1">Helpers <a class="header-anchor" href="#helpers" aria-label="Permalink to &quot;Helpers&quot;">​</a></h3><p><strong>Command Helpers</strong> are prefixes that can be added to the Command String in order to take a more advanced action. Commands without a prefix are executed in the shell of the operating system which runs the Player. <code>cmd.exe</code> on Windows and <code>shell</code> on Android.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>SignaLink for Android Helper Command to change Time zone</p></div><h3 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h3><p>The <strong>Validation String</strong> is used as a comparison to the <strong>Command</strong> output and if it matches then the Command is considered a success. The Validation String must be an exact match.</p><p>This could be useful for a network of mixed Windows and Android Players with a command called &#39;Reboot&#39;. The Command String for &#39;Reboot&#39; on Windows being <code>shutdown /r /t 0</code>, and on Android, it is <code>reboot</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The same can also be useful with a non-mixed network - imagine a network of Windows players with different monitors connected over HDMI/RS232. A single Command called &#39;Monitor On&#39; can be created with the different brands of monitor represented by different Display Settings Profiles, each can have a different Command String to turn the monitor on/off.</p></div><h3 id="available-on" tabindex="-1">Available on <a class="header-anchor" href="#available-on" aria-label="Permalink to &quot;Available on&quot;">​</a></h3><p>Select which type of Display the Command will be available on, leave blank to apply the Command to all types of Display.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>Command</strong> and <strong>Validation</strong> strings can be overridden by editing a <a href="/SignaLink-manual/displays/settings.html#setting_on_the_display">Display Profile</a> and using the <strong>Command</strong> tab!</p></div><h2 id="send-command-xmr" tabindex="-1">Send Command XMR <a class="header-anchor" href="#send-command-xmr" aria-label="Permalink to &quot;Send Command XMR&quot;">​</a></h2><p>Execute Commands via <strong>XMR</strong> from Displays/Display Groups using the row menu:</p><h2 id="scheduling-commands" tabindex="-1">Scheduling Commands <a class="header-anchor" href="#scheduling-commands" aria-label="Permalink to &quot;Scheduling Commands&quot;">​</a></h2><p><strong>Schedule Commands</strong> so that they are executed at a specific time</p><ul><li><p>Click on <strong>Schedule</strong> from the main CMS menu.</p></li><li><p>Select <a href="/SignaLink-manual/scheduling/events.html#content-add-event">Add Event</a> from the top of the Schedule grid.</p></li><li><p>From the Event Type drop down select <strong>Command</strong>.</p></li><li><p>Complete the form fields and select the <strong>Command</strong> to use and <strong>Start Time</strong>.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Scheduled commands are executed once on the Player and only require a <strong>Start</strong> date and time. The Command can be executed up to 10 seconds after the time selected.</p></div><h2 id="shell-commands" tabindex="-1">Shell Commands <a class="header-anchor" href="#shell-commands" aria-label="Permalink to &quot;Shell Commands&quot;">​</a></h2><p>Use the <a href="/SignaLink-manual/media/widgets/shell-command.html">Shell Command Widget</a> to run external Commands based on the Layouts activity.</p><p>Shell Commands with a Command as their source act in the same fashion as normal shell commands. The Command is executed when the Widget is shown on the Layout.</p><p>A Shell Command can also be a Command String with options for all Players provided. This allows Users to add Commands &#39;ad-hoc&#39; for one-time use.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We recommend that Administrators create predefined commands when possible!</p></div><h2 id="monitor-on-off" tabindex="-1">Monitor ON/OFF <a class="header-anchor" href="#monitor-on-off" aria-label="Permalink to &quot;Monitor ON/OFF&quot;">​</a></h2><h3 id="hdmi-cec" tabindex="-1">HDMI-CEC <a class="header-anchor" href="#hdmi-cec" aria-label="Permalink to &quot;HDMI-CEC&quot;">​</a></h3><p>HDMI-CEC is a bus that is implemented on nearly all new large-screen TVs that have HDMI connectors. This bus (which is physically connected within normal HDMI cables) supports control signals that can perform power-on, power off, volume adjusts, selection of video source and many of the features that are accessible via the TV&#39;s remote control. It can also control most other hardware on the HDMI bus.</p><p>SignaLink doesn&#39;t provide a direct interface to HDMI-CEC as there are many different manufacturer specifications, however, it is possible to control HDMI-CEC via a batch file.</p><h3 id="serial-rs232" tabindex="-1">Serial/RS232 <a class="header-anchor" href="#serial-rs232" aria-label="Permalink to &quot;Serial/RS232&quot;">​</a></h3><p>Industry grade monitors often have a serial interface for turning the monitor panel on and off. SignaLink can use the RS232 Command helper to send these Commands to the monitor - usually in HEX mode.</p><p>The following monitors and Commands have been tested:</p><h4 id="nec-e464" tabindex="-1">NEC E464 <a class="header-anchor" href="#nec-e464" aria-label="Permalink to &quot;NEC E464&quot;">​</a></h4><ul><li>Power On - <code>rs232|COM1,9600,8,None,One,None,1|01 30 41 30 41 30 43 02 43 32 30 33 44 36 30 30 30 31 03 73 0d</code></li><li>Power Off - <code>rs232|COM1,9600,8,None,One,None,1|01 30 41 30 41 30 43 02 43 32 30 33 44 36 30 30 30 34 03 76 0d</code></li></ul><h4 id="sharp-lc-42d69u" tabindex="-1">Sharp LC-42D69U <a class="header-anchor" href="#sharp-lc-42d69u" aria-label="Permalink to &quot;Sharp LC-42D69U&quot;">​</a></h4><ul><li>Power On - <code>rs232|COM1,9600,8,None,One,None,1|50 4F 57 52 31 20 20 20 0D</code></li><li>Power Off - <code>rs232|COM1,9600,8,None,One,None,1|50 4F 57 52 00 20 20 20 0D</code></li></ul><h4 id="lg-55lk520" tabindex="-1">LG 55LK520 <a class="header-anchor" href="#lg-55lk520" aria-label="Permalink to &quot;LG 55LK520&quot;">​</a></h4><ul><li>Power On - <code>rs232|COM1,9600,8,None,One,None,1|6B 61 20 30 30 20 30 31 0D</code></li><li>Power Off - <code>rs232|COM1,9600,8,None,One,None,1|6B 61 20 30 30 20 30 30 0D</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It should be noted that other models of each brand should also use the same Commands.</p></div>`,80)]))}const b=s(l,[["render",d]]);export{f as __pageData,b as default};
